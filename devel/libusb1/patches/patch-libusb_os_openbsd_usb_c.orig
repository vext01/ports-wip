$OpenBSD: patch-libusb_os_openbsd_usb_c,v 1.1 2012/06/19 20:48:55 mpi Exp $

Add support for non ugen(4) attached devices through usb(4) buses.

--- libusb/os/openbsd_usb.c.orig	Fri Apr 20 07:44:27 2012
+++ libusb/os/openbsd_usb.c	Tue Jul 17 17:48:51 2012
@@ -420,6 +420,7 @@ obsd_destroy_device(struct libusb_device *dev)
 	free(dpriv->cdesc);
 }
 
+#include <stdio.h>
 int
 obsd_submit_transfer(struct usbi_transfer *itransfer)
 {
@@ -434,9 +435,11 @@ obsd_submit_transfer(struct usbi_transfer *itransfer)
 
 	switch (transfer->type) {
 	case LIBUSB_TRANSFER_TYPE_CONTROL:
+		printf("LIBUSB_TRANSFER_TYPE_CONTROL\n");
 		err = _sync_control_transfer(itransfer);
 		break;
 	case LIBUSB_TRANSFER_TYPE_ISOCHRONOUS:
+		printf("LIBUSB_TRANSFER_TYPE_ISOCHRONOUS\n");
 		if (IS_XFEROUT(transfer)) {
 			/* Isochronous write is not supported */
 			err = LIBUSB_ERROR_NOT_SUPPORTED;
@@ -446,8 +449,10 @@ obsd_submit_transfer(struct usbi_transfer *itransfer)
 		break;
 	case LIBUSB_TRANSFER_TYPE_BULK:
 	case LIBUSB_TRANSFER_TYPE_INTERRUPT:
+		printf("BULK OR INTERRUPT\n");
 		if (IS_XFEROUT(transfer) &&
 		    transfer->flags & LIBUSB_TRANSFER_ADD_ZERO_PACKET) {
+			printf("UNSUPPORTED\n");
 			err = LIBUSB_ERROR_NOT_SUPPORTED;
 			break;
 		}
@@ -455,8 +460,10 @@ obsd_submit_transfer(struct usbi_transfer *itransfer)
 		break;
 	}
 
-	if (err)
+	if (err) {
+		printf("ERROR!\n");
 		return (err);
+	}
 
 	if (write(hpriv->pipe[1], &itransfer, sizeof(itransfer)) < 0)
 		return _errno_to_libusb(errno);
@@ -690,6 +697,7 @@ _access_endpoint(struct libusb_transfer *transfer)
 	return (hpriv->endpoints[endpt]);
 }
 
+#include <stdio.h>
 int
 _sync_gen_transfer(struct usbi_transfer *itransfer)
 {
@@ -698,28 +706,44 @@ _sync_gen_transfer(struct usbi_transfer *itransfer)
 
 	transfer = USBI_TRANSFER_TO_LIBUSB_TRANSFER(itransfer);
 
+	printf("bus number = %d, device_address = %d\n",
+	    transfer->dev_handle->dev->bus_number,
+	    transfer->dev_handle->dev->device_address);
+
 	/*
 	 * Bulk, Interrupt or Isochronous transfer depends on the
 	 * endpoint and thus the node to open.
 	 */
-	if ((fd = _access_endpoint(transfer)) < 0)
+	if ((fd = _access_endpoint(transfer)) < 0) {
+		printf("_access_endpoint(transfer) fails\n");
 		return _errno_to_libusb(errno);
+	}
 
-	if ((ioctl(fd, USB_SET_TIMEOUT, &transfer->timeout)) < 0)
+	if ((ioctl(fd, USB_SET_TIMEOUT, &transfer->timeout)) < 0) {
+		printf("ioctl fails\n");
 		return _errno_to_libusb(errno);
+	}
 
 	if (IS_XFERIN(transfer)) {
 		if ((transfer->flags & LIBUSB_TRANSFER_SHORT_NOT_OK) == 0)
-			if ((ioctl(fd, USB_SET_SHORT_XFER, &nr)) < 0)
+			if ((ioctl(fd, USB_SET_SHORT_XFER, &nr)) < 0) {
+				printf("ioctl 2 fails\n");
 				return _errno_to_libusb(errno);
+			}
 
+		printf("read\n");
 		nr = read(fd, transfer->buffer, transfer->length);
 	} else {
+		printf("write\n");
 		nr = write(fd, transfer->buffer, transfer->length);
 	}
 
-	if (nr < 0)
+	if (nr < 0) {
+		printf("read or write fails\n");
+#include <string.h>
+		printf("%s\n", strerror(errno));
 		return _errno_to_libusb(errno);
+	}
 
 	itransfer->transferred = nr;
 
